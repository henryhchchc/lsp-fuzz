use std::marker::PhantomData;

#[derive(Debug)]
pub struct GrammarJson {
    _phantom: PhantomData<()>,
}

macro_rules! include_grammar_json {
    ($name: literal) => {
        include_str!(concat!(
            env!("CARGO_MANIFEST_DIR"),
            "/res/grammar/",
            $name,
            ".json"
        ))
    };
}

impl GrammarJson {
    /// The C grammar generated by tree-sitter
    pub const C: &str = include_grammar_json!("c");
    /// The C++ grammar generated by tree-sitter
    pub const CPP: &str = include_grammar_json!("cpp");
    /// The JavaScript grammar generated by tree-sitter
    pub const JAVASCRIPT: &str = include_grammar_json!("javascript");
    /// The Ruby grammar generated by tree-sitter
    pub const RUBY: &str = include_grammar_json!("ruby");
    /// The Rust grammar generated by tree-sitter
    pub const RUST: &str = include_grammar_json!("rust");
    /// The Toml grammar generated by tree-sitter
    pub const TOML: &str = include_grammar_json!("toml");
    /// The LaTeX grammar generated by tree-sitter
    pub const LATEX: &str = include_grammar_json!("latex");
    /// The BibTeX grammar generated by tree-sitter
    pub const BIBTEX: &str = include_grammar_json!("bibtex");
    /// The Verilog grammar generated by tree-sitter
    pub const VERILOG: &str = include_grammar_json!("verilog");
    /// The Solidity grammar generated by tree-sitter
    pub const SOLIDITY: &str = include_grammar_json!("solidity");
    /// The Slang grammar generated by tree-sitter
    pub const SLANG: &str = include_grammar_json!("slang");
    /// The MLIR grammar generated by tree-sitter
    pub const MLIR: &str = include_grammar_json!("mlir");
    /// The QML grammar generated by tree-sitter
    pub const QML: &str = include_grammar_json!("qml");
}

#[derive(Debug)]
pub struct GrammarHighLights {
    _phantom: std::marker::PhantomData<()>,
}

impl GrammarHighLights {
    /// The C syntax highlighting queries.
    pub const C: &str = tree_sitter_c::HIGHLIGHT_QUERY;

    /// The C++ syntax highlighting queries.
    pub const CPP: &str = tree_sitter_cpp::HIGHLIGHT_QUERY;

    /// The JavaScript syntax highlighting queries.
    pub const JAVASCRIPT: &str = tree_sitter_javascript::HIGHLIGHT_QUERY;

    /// The Ruby syntax highlighting queries.
    pub const RUBY: &str = tree_sitter_ruby::HIGHLIGHTS_QUERY;

    /// The Rust syntax highlighting queries.
    pub const RUST: &str = tree_sitter_rust::HIGHLIGHTS_QUERY;

    /// The Toml syntax highlighting queries.
    pub const TOML: &str = tree_sitter_toml_ng::HIGHLIGHTS_QUERY;

    /// The LaTeX syntax highlighting queries.
    pub const LATEX: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/highlights/latex.scm"
    ));

    /// The BibTeX syntax highlighting queries.
    pub const BIBTEX: &str = tree_sitter_bibtex::HIGHLIGHTS_QUERY;

    /// The Verilog syntax highlighting queries.
    pub const VERILOG: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/highlights/verilog.scm"
    ));

    /// The Solidity syntax highlighting queries.
    pub const SOLIDITY: &str = tree_sitter_solidity::HIGHLIGHT_QUERY;

    /// The ShaderLang syntax highlighting queries.
    // [TODO] There is no query for slang available yet.
    pub const SHADERLANG: &str = "";

    /// The MLIR syntax highlighting queries.
    pub const MLIR: &str = tree_sitter_mlir::HIGHLIGHTS_QUERY;

    /// The QML syntax highlighting queries.
    pub const QML: &str = tree_sitter_qmljs::HIGHLIGHTS_QUERY;
}
