use std::marker::PhantomData;

#[derive(Debug)]
pub struct GrammarJson {
    _phantom: PhantomData<()>,
}

impl GrammarJson {
    /// The C grammar generated by tree-sitter
    pub const C: &str = include_str!(concat!(env!("CARGO_MANIFEST_DIR"), "/res/grammar/c.json"));

    /// The C++ grammar generated by tree-sitter
    pub const CPP: &str =
        include_str!(concat!(env!("CARGO_MANIFEST_DIR"), "/res/grammar/cpp.json"));

    /// The JavaScript grammar generated by tree-sitter
    pub const JAVASCRIPT: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/javascript.json"
    ));

    /// The Ruby grammar generated by tree-sitter
    pub const RUBY: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/ruby.json"
    ));

    /// The Rust grammar generated by tree-sitter
    pub const RUST: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/rust.json"
    ));

    /// The Toml grammar generated by tree-sitter
    pub const TOML: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/toml.json"
    ));

    /// The LaTeX grammar generated by tree-sitter
    pub const LATEX: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/latex.json"
    ));

    /// The BibTeX grammar generated by tree-sitter
    pub const BIBTEX: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/bibtex.json"
    ));

    /// The Verilog grammar generated by tree-sitter
    pub const VERILOG: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/verilog.json"
    ));

    /// The Solidity grammar generated by tree-sitter
    pub const SOLIDITY: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/solidity.json"
    ));

    /// The Slang grammar generated by tree-sitter
    pub const SLANG: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/slang.json"
    ));

    /// The MLIR grammar generated by tree-sitter
    pub const MLIR: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/grammar/mlir.json"
    ));
}

#[derive(Debug)]
pub struct GrammarHighLights {
    _phantom: std::marker::PhantomData<()>,
}

impl GrammarHighLights {
    /// The C syntax highlighting queries.
    pub const C: &str = tree_sitter_c::HIGHLIGHT_QUERY;

    /// The C++ syntax highlighting queries.
    pub const CPP: &str = tree_sitter_cpp::HIGHLIGHT_QUERY;

    /// The JavaScript syntax highlighting queries.
    pub const JAVASCRIPT: &str = tree_sitter_javascript::HIGHLIGHT_QUERY;

    /// The Ruby syntax highlighting queries.
    pub const RUBY: &str = tree_sitter_ruby::HIGHLIGHTS_QUERY;

    /// The Rust syntax highlighting queries.
    pub const RUST: &str = tree_sitter_rust::HIGHLIGHTS_QUERY;

    /// The Toml syntax highlighting queries.
    pub const TOML: &str = tree_sitter_toml_ng::HIGHLIGHTS_QUERY;

    /// The LaTeX syntax highlighting queries.
    pub const LATEX: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/highlights/latex.scm"
    ));

    /// The BibTeX syntax highlighting queries.
    pub const BIBTEX: &str = tree_sitter_bibtex::HIGHLIGHTS_QUERY;

    /// The Verilog syntax highlighting queries.
    pub const VERILOG: &str = include_str!(concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/res/highlights/verilog.scm"
    ));

    /// The Solidity syntax highlighting queries.
    pub const SOLIDITY: &str = tree_sitter_solidity::HIGHLIGHT_QUERY;

    /// The ShaderLang syntax highlighting queries.
    // [TODO] There is no query for slang available yet.
    pub const SHADERLANG: &str = "";

    /// The MLIR syntax highlighting queries.
    pub const MLIR: &str = tree_sitter_mlir::HIGHLIGHTS_QUERY;
}
